#ifndef PCSC_CENXFS_BRIDGE_ReaderChangesMonitor_H
#define PCSC_CENXFS_BRIDGE_ReaderChangesMonitor_H

#pragma once

#include <vector>

#include <boost/shared_ptr.hpp>
#include <boost/thread/thread.hpp>

// PC/CS API -- для SCARD_READERSTATE
#include <winscard.h>

class Manager;
class ReaderChangesMonitor {
    /// Объект для общения с подсистемой PC/SC и для получения величины таймаута
    /// ожидания изменений в считывателях, для возможности корреткно обрабатывать
    /// таймауты задач на чтение карточки.
    Manager& manager;
    /// Поток для выполнения ожидания изменений.
    boost::shared_ptr<boost::thread> waitChangesThread;
    /// Флаг, выставляемый основным потоком, когда возникнет необходимость остановить
    /// `waitChangesThread`.
    bool stopRequested;
public:
    /** Запускает поток ожидания изменений в считывателях.
    
    @param manager
        Объект, через который осуществляется общение с подсистемой PC/SC для
        опроса считывателей.
    */
    ReaderChangesMonitor(Manager& manager);
    /// Запрашивает останов потока отслеживания изменений и ждет его завершения.
    ~ReaderChangesMonitor();
private:// Опрос изменений
    /** Функция для запуска в другом потоке для ожидания изменений в считывателях.
        Блокирует выполнение потока, пока не будет обнаружено изменение. Данная функция
        завершается при выполнении процедуры разрушения объекта (в потоке, который его создал).
    */
    void run();
    /** Выполняет цикл опроса с одним и тем же набором считывателей. После ее возврата
        нужно запустить ее еще раз с тем значением, которая она вернула, чтобы повторить
        ожидание изменений с новым набором считывателей.

    @param readersState
        Состояние элемент, отвечающего за мониторинг изменений в количестве считывателей.

    @return
        Новое состояние, описывающее элемент наблюдения за подключенными считывателями.
    */
    DWORD getReadersAndWaitChanges(DWORD readersState);

    /** Данная функция блокирует выполнение до тех пор, пока не получит событие об изменении состояния
        физических устройств, поэтому она должна вызываться в отдельном потоке. После наступления
        события она уведомляет об этом менеджера, который отсылает соответствующие события всем
        заинтересованным слушателям подсистемы XFS.

    @param readers
        Отслеживаемые считыватели. Первый элемент отслеживает изменения устройств,
        все остальные -- изменения карточек в устройствах.

    @return
        `true`, если произошли изменения в количестве считывателей, `false` иначе.
    */
    bool waitChanges(std::vector<SCARD_READERSTATE>& readers);
};

#endif // PCSC_CENXFS_BRIDGE_ReaderChangesMonitor_H